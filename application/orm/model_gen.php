<?php
namespace ORM;

include_once "connection.php";

/**
 * Description of model_gen
 *
 * @author yagator
 */
class Model_Generator {
    
    private $connection;
    private $entity_path;
    private $dao_path;
    
    function __construct() {
        global $APPLICATION_PATH;
        $this->connection = new Connection();
        $this->entity_path = $APPLICATION_PATH . "orm/entity/";
        $this->dao_path = $APPLICATION_PATH . "orm/dao/";
    }
    
    public function entities(){
        $tables = $this->getTables();
        foreach ($tables as $table){
            $filename = $table . ".php";
            echo "file: " . $this->entity_path . $filename; 
            echo "<br>";
            $cad = "<?php
 namespace ORM\\Entity;
 
 /**
 * Entity model of $table table
 * autogenerated by Model_Generator
 *
 * @author @yagator
 */
 class " . $this->c_name($table) . " extends Abstract {\n";
            $cad .= "
    function __construct() {
        parent::__construct('" . $table . "');
    }
    
";
            
            $columns = $this->getColumns($table);
            foreach ($columns as $column) {
                if ($column != "id"){
                    $cad .= "
    private $" . $column . ";
    
    public function get" . ucfirst($column) . "() {
        return \$this->" . $column . ";
    }

    public function set" . ucfirst($column) . "($" . $column . ") {
        \$this->" . $column . " = $" . $column . ";
        return \$this;
    }
";
                    //if current column is a foreign key:
                    $pos = strpos($column, "id_");
                    if ($pos !== FALSE){
                        $obj_name = substr($column, 3);
                        $cad .= "
    private $" . $obj_name . ";
    
    public function getEntity" . ucfirst($obj_name) . " (){
        return \$this->" . $obj_name . ";
    }
    
    public function setEntity" . ucfirst($obj_name) . " (" . ucfirst($obj_name) ." $" . $obj_name . "){
        \$this->" . $obj_name . " = $" . $obj_name . ";
    }
";
                    }
                }
            }
            $cad .= "}";
            $file = fopen($this->entity_path . $filename, "w");
            if ($file){
                fwrite($file, $cad);
                fclose($file);
                echo "... generated <hr>";
            }else
                echo "error generating entity file<hr>";
        }
    }
    
    public function daos(){
        $tables = $this->getTables();
        foreach ($tables as $table){
            $filename = $table . "_dao.php";
            echo "file: " . $this->dao_path . $filename;
            echo "<br>";
            $cad = "<?php
namespace ORM\\DAO;

include_once (\$APPLICATION_PATH . 'orm/dao/abstract_dao.php');
include (\$APPLICATION_PATH . 'orm/entity/$table.php');

/**
 * Dao model of $table table
 * autogenerated by Model_Generator
 *
 * @author @yagator
 */
class " . $this->c_name($table) . "_Dao extends Abstract {

    function __construct() {
        parent::__construct(new " . $this->c_name($table) . "());
    }

}
";
            //echo $cad;
            if (!file_exists($this->dao_path . $filename)){
                $file = fopen($this->dao_path . $filename, "w");
                if ($file){
                    fwrite($file, $cad);
                    fclose($file);
                    echo "... generated <hr>";
                }else
                    echo "error generating dao file<hr>";
            }else
                echo "dao already generated<hr>";
            /*$columns = $this->getColumns($table);
            foreach ($columns as $column){
                
            }*/
        }
    }
    
    public function getTables(){
        $qry = "SHOW TABLES";
        $rs = $this->connection->execute($qry);
        $entries = array();
        while (($entry = $this->connection->fetch($rs)) != NULL){
            foreach($entry as $table){
                array_push($entries, $table);
                break;
            }
        }
        return $entries;
    }
    
    public function getColumns($table){
        $qry = "SHOW COLUMNS FROM `$table`";
        $rs = $this->connection->execute($qry);
        $entries = array();
        while (($entry = $this->connection->fetch($rs)) != NULL){
            foreach($entry as $table){
                array_push($entries, $table);
                break;
            }
        }
        return $entries;
    }
    
    private function c_name($c){
        $a = explode("_", $c);
        foreach ($a as $k=>$v){
            $a[$k] = ucfirst($v);
        }
        return implode("_", $a);
    }
}
